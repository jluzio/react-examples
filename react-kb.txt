> Starter kits
https://create-react-app.dev/
https://github.com/facebook/create-react-app

npx create-react-app test
or
npx create-react-app test --use-npm

> Typescript
npx create-react-app my-app --template typescript
https://create-react-app.dev/docs/adding-typescript/

> Community Starter kits
https://www.reactjscn.com/community/starter-kits.html
- other relevant? (need to investigate):
 - react-boilerplate (community maintained) :https://github.com/react-boilerplate/react-boilerplate
 
> Tutorial
https://reactjs.org/tutorial/tutorial.html
current: https://reactjs.org/tutorial/tutorial.html#lifting-state-up
state info: https://reactjs.org/docs/lifting-state-up.html

> Course
https://github.com/StephenGrider
https://github.com/StephenGrider/redux-code
- starter: https://github.com/StephenGrider/ReduxSimpleStarter.git

> Misc
function.bind() (to set the correct this value?)
ex:
class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);
  }

  handleCelsiusChange(temperature) {
    this.setState({scale: 'c', temperature});
  }
}

Lifting State Up - Lessons Learned
There should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the top-down data flow.

Lifting state involves writing more “boilerplate” code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state “lives” in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.

If something can be derived from either props or state, it probably shouldn’t be in the state. For example, instead of storing both celsiusValue and fahrenheitValue, we store just the last edited temperature and its scale. The value of the other input can always be calculated from them in the render() method. This lets us clear or apply rounding to the other field without losing any precision in the user input.